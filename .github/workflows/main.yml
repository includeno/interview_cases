
   
# https://docs.github.com/en/actions/guides
# CI name , it will display on github's action page menu
name: Release
# trigger on which this CI should be run
on: # push operation is operate
  push:
    # here since my repository branch is named `main` , you should follow your own repository like `master`
    branches: [main]
# CI enviroment settings
env:
  STATE_RELEASE_VERSION: "1.0" # version
  TAG_NAME: "interview" #tag 只能小写开头
jobs:
  build:
    name: Github Action Release
    runs-on: ubuntu-latest # use latest ubuntu to run the job
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - run: npm install
      - run: npm run build
      - name: Sets build date
        run: echo "BUILD_DATE=$(date '+%Y%m%d')" >> $GITHUB_ENV
      - name: docker buildx
        run: 
          docker buildx create --use --name mybuilder
      - name: docker buildx run
        run: 
          docker buildx inspect --bootstrap
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      #版本号第一位不允许空格
      - name: Push to Docker Hub
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: "includeno/${{ env.TAG_NAME }}:latest,includeno/${{ env.TAG_NAME }}:1.0"
          push: true
      - name: Push to Docker Hub
        id: docker_build2
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./flask/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: "includeno/${{ env.TAG_NAME }}_server:latest,includeno/${{ env.TAG_NAME }}_server:1.0"
          push: true
      - name: The job has succeeded
        if: ${{ success() }}
        run: echo "success"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.BUILD_DATE}}${{ env.STATE_RELEASE_VERSION }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: dist-v${{ env.STATE_RELEASE_VERSION}}-production.zip
          asset_name: interview-cases-v${{ env.STATE_RELEASE_VERSION}}-production.zip
          asset_content_type: application/zip
      #https://github.com/8398a7/action-slack
#      - name: Slack Nofitication
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
#        if: always() # Pick up events even if the job fails or is canceled.